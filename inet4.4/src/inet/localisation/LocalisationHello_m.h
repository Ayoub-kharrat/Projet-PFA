//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/clock/model/LocalisationHello.msg.
//

#ifndef __INET_LOCALISATIONHELLO_M_H
#define __INET_LOCALISATIONHELLO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class LocalisationHello;
class XedMsg;
class AnchorData;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address


namespace inet {

/**
 * Class generated from <tt>inet/clock/model/LocalisationHello.msg:23</tt> by opp_msgtool.
 * <pre>
 * class LocalisationHello extends FieldsChunk
 * {
 *     Ipv4Address srcAddress; //terminal que gerou o pacote
 *     unsigned int sequencenumber;//sequence number created by the source node(node's ID = srcIPAddress) of the hello msg and associated with that node
 *     Ipv4Address nextAddress; //terminal que re-/transmite o pacote
 *     int hopdistance;
 *     string type;
 * }
 * </pre>
 */
class INET_API LocalisationHello : public ::inet::FieldsChunk
{
  protected:
    Ipv4Address srcAddress;
    unsigned int sequencenumber = 0;
    Ipv4Address nextAddress;
    int hopdistance = 0;
    ::omnetpp::opp_string type;

  private:
    void copy(const LocalisationHello& other);

  protected:
    bool operator==(const LocalisationHello&) = delete;

  public:
    LocalisationHello();
    LocalisationHello(const LocalisationHello& other);
    virtual ~LocalisationHello();
    LocalisationHello& operator=(const LocalisationHello& other);
    virtual LocalisationHello *dup() const override {return new LocalisationHello(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const Ipv4Address& getSrcAddress() const;
    virtual Ipv4Address& getSrcAddressForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<LocalisationHello*>(this)->getSrcAddress());}
    virtual void setSrcAddress(const Ipv4Address& srcAddress);

    virtual unsigned int getSequencenumber() const;
    virtual void setSequencenumber(unsigned int sequencenumber);

    virtual const Ipv4Address& getNextAddress() const;
    virtual Ipv4Address& getNextAddressForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<LocalisationHello*>(this)->getNextAddress());}
    virtual void setNextAddress(const Ipv4Address& nextAddress);

    virtual int getHopdistance() const;
    virtual void setHopdistance(int hopdistance);

    virtual const char * getType() const;
    virtual void setType(const char * type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LocalisationHello& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LocalisationHello& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/clock/model/LocalisationHello.msg:31</tt> by opp_msgtool.
 * <pre>
 * class XedMsg extends FieldsChunk
 * {
 *     Ipv4Address srcAddress; //terminal que gerou o pacote
 *     unsigned int sequencenumber;//sequence number created by the source node(node's ID = srcIPAddress) of the hello msg and associated with that node
 *     Ipv4Address dstAddress; //terminal que re-/transmite o pacote
 *     double random;
 * }
 * </pre>
 */
class INET_API XedMsg : public ::inet::FieldsChunk
{
  protected:
    Ipv4Address srcAddress;
    unsigned int sequencenumber = 0;
    Ipv4Address dstAddress;
    double random = 0;

  private:
    void copy(const XedMsg& other);

  protected:
    bool operator==(const XedMsg&) = delete;

  public:
    XedMsg();
    XedMsg(const XedMsg& other);
    virtual ~XedMsg();
    XedMsg& operator=(const XedMsg& other);
    virtual XedMsg *dup() const override {return new XedMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const Ipv4Address& getSrcAddress() const;
    virtual Ipv4Address& getSrcAddressForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<XedMsg*>(this)->getSrcAddress());}
    virtual void setSrcAddress(const Ipv4Address& srcAddress);

    virtual unsigned int getSequencenumber() const;
    virtual void setSequencenumber(unsigned int sequencenumber);

    virtual const Ipv4Address& getDstAddress() const;
    virtual Ipv4Address& getDstAddressForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<XedMsg*>(this)->getDstAddress());}
    virtual void setDstAddress(const Ipv4Address& dstAddress);

    virtual double getRandom() const;
    virtual void setRandom(double random);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const XedMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, XedMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/clock/model/LocalisationHello.msg:38</tt> by opp_msgtool.
 * <pre>
 * class AnchorData extends FieldsChunk
 * {
 *     Ipv4Address srcAddress; //terminal que gerou o pacote
 *     unsigned int sequencenumber;//sequence number created by the source node(node's ID = srcIPAddress) of the hello msg and associated with that node
 *     Ipv4Address nextAddress; //terminal que re-/transmite o pacote
 *     int hopdistance;
 *     double x;        // x coordinate of anchor
 *     double y;        // y coordinate of anchor
 *     double rssi;     // received signal strength indicator
 *     string type;
 * }
 * </pre>
 */
class INET_API AnchorData : public ::inet::FieldsChunk
{
  protected:
    Ipv4Address srcAddress;
    unsigned int sequencenumber = 0;
    Ipv4Address nextAddress;
    int hopdistance = 0;
    double x = 0;
    double y = 0;
    double rssi = 0;
    ::omnetpp::opp_string type;

  private:
    void copy(const AnchorData& other);

  protected:
    bool operator==(const AnchorData&) = delete;

  public:
    AnchorData();
    AnchorData(const AnchorData& other);
    virtual ~AnchorData();
    AnchorData& operator=(const AnchorData& other);
    virtual AnchorData *dup() const override {return new AnchorData(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const Ipv4Address& getSrcAddress() const;
    virtual Ipv4Address& getSrcAddressForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<AnchorData*>(this)->getSrcAddress());}
    virtual void setSrcAddress(const Ipv4Address& srcAddress);

    virtual unsigned int getSequencenumber() const;
    virtual void setSequencenumber(unsigned int sequencenumber);

    virtual const Ipv4Address& getNextAddress() const;
    virtual Ipv4Address& getNextAddressForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<AnchorData*>(this)->getNextAddress());}
    virtual void setNextAddress(const Ipv4Address& nextAddress);

    virtual int getHopdistance() const;
    virtual void setHopdistance(int hopdistance);

    virtual double getX() const;
    virtual void setX(double x);

    virtual double getY() const;
    virtual void setY(double y);

    virtual double getRssi() const;
    virtual void setRssi(double rssi);

    virtual const char * getType() const;
    virtual void setType(const char * type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AnchorData& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AnchorData& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::LocalisationHello *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::LocalisationHello*>(ptr.get<cObject>()); }
template<> inline inet::XedMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::XedMsg*>(ptr.get<cObject>()); }
template<> inline inet::AnchorData *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::AnchorData*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_LOCALISATIONHELLO_M_H

